package nc;

/**
 * @author lc
 * @version 1.0.0
 * @ClassName NC127.java
 * @Description 最长公共子串
 * @createTime 2022年01月21日 17:16:00
 */
public class NC127 {
    public static void main(String[] args) {
        System.out.println(LCS("pRZUiGGL2W5yXwyKItUb3p7n1Gz3PWVbQgATO7mu07W4e98g55nm743H8cW43IRAku0grbWExoVz2eo57OCjZ7j8OU6edbV54r6Mc8TxU5LUY7Kqe05RuTn1mDG8t765E3CRd8GL29MSomSyqC3r4p80t7BiX1mUKP2Zj5PawyO987It281Wu7l9Sbm710Eiz1vq17r2q12p9uIb2OkJ5voo1PphkV3a7212j8QXyS3D79B41o2V5aj7vUO0rL4LP3RbL46OMJH98OWO9dhgpynAk40Aon8A8cOKB9cLBtVx0mm189C2zsbQjlS02jPgASN33BGpB41j3ivb60dFrOrBEuNXVcRsEQ2JhTH2qLXX11Ua0j9Yq6M9WfBL9fdluVPFyZTgHX6Xu4Cuv09NBkCSUdg399Qwu5xjzN8o7Hpe3qh1CL9O70182mY4zS3L87U5uVb5hQsQdQybR7g61p64962kLlb5EcqbB3PuQRdnB87n67ww1Xteo4DD4gL1Q6csMGJmM2C32Ky0l38590pLD14hpJNs3oiiH0Ihy1Pgwe37oJ1u8QnxiJw6qaORm7R8GXRb34YCpwj0D18F5Hqc8K8sebkG77Urv6Ni6Dqj70XF98pIae114DKGjN8NrM17GNF0svBh9cSRZPEv03i58F8Lw5TK3u6c9TP6Wlv86msD34N57jj9gr5MbTsna4hi4KZh5rB54Kl87fB9uN7sVQD0otf8W9sFhwc5Y8IG08R34h084aQ2t0Jc8c8d8wtY5Afn3EKPbsIkg1O9s12fp0KwvvK6d36J76Fr2uE3KIk766VeX4PV02gC3AqB3og0638Ti6yZDRE7M9imv695yuBxLy7C3h4jMA58mQd0js4Yy48A6Lc3nf1yWvL6eG2E6727U7v0s966gx9fkEOekhpgZ65CK48nA158U9d7i2RwSX14s0R5ARZv343v40DB4E9035a625pkxliaiqa3J889lIutSmX4oe6376mnHo525fF0Kv29F019gKm9xv5RSb61E2YvJpf64RcY76DerLFgRBbkHpYYeNq8SleejNS2F5dmGfAO8Qr41fw2zSXMAq5XH1J1eDhLQOcjbC101IXNhC4Rxg4qoO1CqLKTjQn2X9pix7sRx5VT343NRP95s9iP2SxJpj9M9iwh5xPx465dTgYMKW75Z0OyKOxMpJ8O01h296UwOtbl0l6TxY8D1I428bi5f77BJz1w51Y8w0W1ufcSJdQNDRvoR3FL5ebvK5i4m5VkhZ2GoqZ1toa78WCT8kqq8XZGROS6HjES9343k44cdB87YFa4TwFc7xr7WZcCKbY18Oy7M8j59Xv5H2yGR03nPr1fv4a2q1D05b0pZV99uJWz0nTK701KVEBU1w8d98Phg8LiYQqxWDP6q83879d5e79fM57hnpASuiJTYq3iwJmENUPFYDhbdPNBLsAYD1aJpBYY9EIHx53o10xn9V37i1uOj0u3pkZ19488jQDDS3EA3Cx8y3fQh2oFMykm6sd8f3by009R5s9ez7dh6GC39VkPL80dgd855P8dr0lY68u6WDn681xjMJxoTMFm86S2U80iq321YXS2xSxOxm0v3tG9364PO4i10i92F64gqYkJDIOXj4c3BV994cxOB1t4MrI472fGy8G5NAeI8MjFR1BFcN1E7078H7Wov2xXB5g0i6BrrAXu7VkYOuvXcM5ho1HaiU7voyjHR91ouFChMNyw4E0M56flnIBguMQjJlt8OL6K25Yx2TC1Cr2Or1shnK8OZPY6Wy1J9e86oJ41kb35G4xz43u0CLiNipwx94G8EV58y35kzxF9jO3w3ldr87Q4syYLq4132O3a12nOj7cS7n707J3ylcNvkvopwakgE5k4rUG31FPByvpyk0y57n3x4m40K09iPmWDZi5L6rJ7wWV15tT5F5ESiQrBLZZ702k3eUOsx7Z88rNj833cWutP2yomOkUkKPu19QD3bnjum1wh7R4S67CVmqx3OGJ6RKq15N517ZWxL848cuvYBPoz4l6ZS64w97rDesnclMw4qxy8xS2tJVZtVZH5Jo3vKKl5ul29QmfkFr52mtXF7Mxw6uI15TBn2YQ6tc8JgM8vvr2NuyZdfc3nrI5b97QfC5neJfvQO8n6RCd6JCHaJkFDC60NTC13T5saZ7JiS2VUB96x672EcpJQ915D9q8iy08I7U6rj80MQrD3wxs9TXZj1W156y1L2xU7nVYqdUgfZtN8k006V6x4N8cz5aM3oJLu59fz8UYU04GM8iOjxpUN8ht4tjN7Kl5O8B857GaS81Y3tlUrM83t9f117N6wBMjprnfG74U069qqQ0BFfyvjfdZtkVK6E5e5uo1tE8woX19cAHXJ5kI70Ro5Xmoph4MTY2lbqKKbDM66Ym067vnJxAvD65cUkFuX01D59200DZrKsKkkwT5jz5G9Z3w393Z4t8NWr4VrrhDPQ3dt17KpSEv2CXBGELy55S93vW8hw2yxlyI9YbaE0Ei8jsZ1r7V1yi9H82Y55mL1PbqZk60xT4W0g59y2Au2Xgq6wA2ZoMGTwUVS1ScR2EKRyl2T1q8hNzoIgqAZ1zWV8znlQZKbm6kp87DD12lRi1IhQd8R053A31mmdA8J9nt6123Qlly7ZrmgOALk2PTiICAFRJ6Mw7K9A7t1oEVJN1j1Frp8HWgp4g78slLY1X6ne0KZ51OTV55M7EnFqwF1FUQe78Fbr3oskp2bR0OPx0afaPxC5Qr7D1G7OyH9v45u8Xri1cF0RR9M4Wd2xx6ym1gHW0Y8xvuDF08M2f3NX62b7DW1SpO4PgHX8Ve876P362Fy1Fhnw891IgHcv9pj6ci0U3yQbr5Vq6N2d9e84ix19j75HXaWmp1rlQXJVHE0Q4ZEt4Y2426rVb2yBbU0eTEEl329U45jn0FsnSuxgour0POqbkX2737Xl527tDrFgxVG5hJ88UkSeCzr1I4gJ6gmtJV88rb1w5biP6AQCVjd53r7XIMcW7NUGnTEF72sMa5o21G6f01hqZr2SHi8K2ZV7YOaYPah3359xOWX7Op3s58eBBG1yK6c2jb749iVr7l708hW11se088T832Dwrc550UQ0rcnr2U7nGYw9nUUoZIgxQFXN3KFpLNMK3m8eEvDSHGy5Cfd23WDH513I6J0T7GeN51TDTGUH6zhFNKN1TqkogX6d0LT7Jz3Wt66TyxtQMK1WbdcUs1F5Nn3V0M05zYIa9XtxQ3y5S24oHmPL0o349OP19e5If20EnV0EewX6CXTYoP0mj9wR7e159166CUAH87aXHzMlaW0C7BBwynavunP6CmY8lrRk04GZFZ6oHucN4f4U87D2JaB349xxIHwrEje7y7UgmzA96DXWQ9Bw1EYN3kAlM55l31EJd177hvcB6MSGN50Z2dp15xn4JT85Q1y7154RghKXnrE80heG5pO3hr5521wPOp4fUyyKyuo9Rpl67DFc644UkcRn1TY0zj15FC1E3w5C67KziB5YL7f5d3a516GILvM1CteuuldEKWh89eZsJi9dRhs2F6FoBocn843921IXaU28Qz6fBIG7hTwMTKk93ziTQz97NJhYGvgiNNqdsk3YgLu5438qy0CGLD7qV8X02yx1uKot7Px5msIQWWDgoyO72ZYHQ1ibG29X3T5cMbAT59GwyAXSkq6oSH6MNbKl1xB68rZWTaL7VRmzE9uf34602Dp4HVDZhg4LNcj904f1VDiWPNnBb6YzH5F4b1F2T9vUOTD9Dfnp0HVD1C7KtSS27FVPsaCIh8ZtTyvcTMl68jKQe98ZCko6YraQ8v4PxI40k6D1Z65wzw2011vm7M0Kd9g02LY8m02mGv5xhinqiNtR0stqY36U60m4un494ZnnSyIfCF3C472b51vkirLDCX52tWyqU29dPOGfv45H6rfXWPU4tK0qNovybIrMUEVVg6lyY1u6Y0fNtK3mE2046Nsdxfs91VSu26iwDa5ao5TMelA28eYNgl8544Z6QovQyos9549N64k0zMW147FwPO0XlDw1W5Iw49ti3dXC7W34XE2E7brr8ev0fk755O7buVosM6rCtRXl5LpPK74o0L5QE05VBMV8R3807eeDiZytYgg90NyLDbr9d4VgV7vFw08taDkqR6G9Ql4jKFT1zP2c8PgPsYg12LlNMDG8k1jctf40S94pw2we7TR3TvJS6nfTr4lhBfxU1L87F7Go66p9H87eb4awhVaq6Z50S3wx7Fm483pceIEt078ShA326mfcxZUn7CzpXlScCFh85ZhhBji4ZbHL427h0MxDsXd6E8gy4624F7689F6L7wlvo4WQ4gkTlgiDhBboT7sVgfjUqr4tcFQ03r25AXZ0hbYnl4aKo0mBw7ARSY0aw068EsiS0suCgbD0H02B8lj2675wrD9KlN3VAnPsc49ueiMuzz3Mnpwoh8s7NgB2EI65Fg0PjhwRRcGZxYw0DeW19VZE3Z73WbYHDIlMCmL615CYM8ZZ6SqmtjYdEf957VsRzKg18B5u2R0xS097XSFpiJ2u582uiwbjaW1tfOp7zAMAzSMq2jGMvWJN5w79hqXm56uAY8e4ifF2Cv2Y46Czh9z1GxTO7343Eu002214Hjnib7A2Zb2cR4XJY1usvulHPy5551r7SZSvD9PF0OtzTTYD5LJwacW76uyoLJZh2k0YqU9Des0Wp59jK9848jkA32dHUZvq70e39gK5OfDQp1WAm260PM194q95Tnks4s3895C4MIG8Hp3UCrUcaRBKx94L1hq9TZSSe23fu0F3iSD0lK2QY6iraYv8D4Ef0MRqvILe4avPvC2Z1z0v7sG9pOASrNc1qX4wKEdwXXtMwvi7O460MaIO2V2yn663Z0wSG6B69A3t9R26eBUd3sNLBUMdfOT1tGz85HTF","xdV0f33bF3NLq1zZ06tfM7t46UGm831YaSz4w8UducP3o0169aZ6npM974RR1i3ib7ceV250W702oC616P1zzK8FdEyWZ5zSEsgrgMO65YXfV9TjfvNd9LNJ3RRl3P4VBrl38fvm0eceG118ir62AVFs8Hj1j4S67CVmqx3OGJ6RKq15N517ZWxL848cuvYBPoz4l6ZS64w97rDesnclMw4qxy8xS2tJVZtVZH5Jo3vKKl5ul29QmfkFr52mtXF7Mxw623C832wSG9Pk2MqZIJlxfV38s8VjFhbN0S8ooycPWbDORI2lsZXV41EwvZU3IMCJk3MJ28QmmZuhWj2Ehcq5BQEsOl18nbJZA7kGr1thQl7370H60HJeXJAJl8x4ibR92pw7TMfoULYW90e2alC6o3yqPOsarVJFtabA2O82J1Xer6034aAZ6W5NDn039X809l7kN8T6URZ38O4B9c08G8rcP3cP193nmu8OnVtJDcku39HW1JTMRp5AHCdGXHliF5BKk5qT9i0UBP761QRFE26uypTR875aLP5w8UhfsRluX18uE4v5Mm80hd2Cuf3YSzs5xeJuMl2bsTfi8e617798WQAJUupe091b7Qm7SndRhj79e6Cnzxt7fAIW8wgiWAFv2Vr3CTv83lLgJc93WKvM10qg3sSIBaWelWp48KvP1xfBxIB8hX6rL9BX71G0mNQX57S8kbid6ZbHOueE5xzo5Rl07Y5AzzxPVV6bRo0sC91nD7xhf20mo9B9d8cuBVcPd33ccAdQMVY5lrBkZZhUHv8HP2J3xK6ahexUpj87256Mi95x0bvCq7jnbex35O05WB5XPG7H0cdym7R640riMh6hrk8Sxe42DJGkgTGPU9e321V3yu9DPCo8bWAOF7Fp3yzdDppGy836n598Hx6J8uO45V1Y99UXgt9cfN702p12p4NGx3u1j814b95FU57BKHI7x7wanF11dF0UkkqsJ2BxOnpPufY85bs5EyfuWQiVumArfdld08j0XDm9q7ew60c6JzagCKE2160Z5IcH342S8I7xxitNx8G7w0oF6C5V24hN38GC0I0B1f8SfxZOF1NQ6A9W1aAaJucAjj60mGOb00H2bn14xWoB4z5akJk0PtsE9r0I9r454rCLcvA2pwm9ypU0mu3RxJ0Q3oQTp8cH7f3assMFYGwYA1AB8F5T6ge72S6bnCukVQ39cHzagVQr8722NYWFH28nxz34tfeY7GHG8ko6DLE19cZ94Q627h7UjYH13p174iG553tUevr09J9r21HKYrmB00UCildmOxpWmp8z5ay216PWsX2FF6tuMRPSL9IupaC8kpnox4fy716u9Nue2PkysNfJx9rj4zp8ED6bE0B68BRBvkYi3Nu93wR3729h5Lyd10xco7mIjp34242jebS4T0d33qiZ3789EgRDTui8GczgVHJ63D37rPVLI193mR59Y30AR8v3Tz149N8842q36wNeKB3jkjdEYtLnuE2s4Eno6919fMH7x50k9MtDp52zVR3UwZGBc9xy7h2eYl3Ep096rBZJKKy89y27cQQoAvRba7IChe2I7MgVQt78H186u8y243JLI7KI1C2VuS6iWAZ2hGmGNO7HMWhZ0oPORlxj5oC9b1gRSKTxnyt0HPwQ4vFM2z501ge6zc7s5r8F0E81EA6m6E241d06E1cp36pSf6jqW8gX1LmI0p58qZKgF9QvJk57yY92VPoO30cq8KM051okJk8CSNc70AjjCcAje8G46PM7mcL1f00raJy8eRHX74pMgi40DwHHfbI71r03vBO4KQj5P4388rjYOHdNgs2UeNB17AU32hz15ZdQ6zs7m9a1WIy6J571DC2HVozq4aad09P9Gh29AB9zKOZxXM85HPhD7o6E6mSYIPKQ9XM5Www7j2lE7AqEbvEH8trNJXIJILvjy6e4h8CY4h7ya8t046wX03N1jXhkit69e13VH8H2Ooau789i9KhS7C1E12DUQ2n776cC9VayTxWxleaQUtZX2G83RU2h90mcU3q13f471ntn90dd468MDT6p8Hx6w7c14RI40R7n60sK3eW7n2xEF1eQk09X1ywXl599SLEA2w33uGK0v6Cb4DbLFeb0FbThxx52H7zw9c006MukPUsEt34lc8XeNi36987551do8Xnh5jIlQ0qDDDdrrc02g4z2cs564SNPjWfiU7Ar80siTUev2OEdK8F9y1tPr501sVo88m6eE48tAMTJ0C0OU5855FhyyeT4z5Nldi9I2Ba5Wq7Gr3l6HPLNc59P9tvH66GhRHqHAzyuwlFXQO5F38AdW8H0gcvsLP0494GMjJjSb96n02sGgo09lCG7Mv492g90Gnr6ebw8zteP7cUlu8VyJ8bkH4GLOnFUur5L4hMY2gg61v3M01ANj9C3PQ2xsKw6J0C2VB2UWzT0f004m59McjA1vQU539Cd0gyOqE8Lulx3YzZn678h6JG2UoXWX3Uu6u7BWh8ew1z6j23nmhy6sHUs46BwvuJBj1ftFeArADU7ZhTN2pXzZ9Z242XDfFlZ9Ym338S62tpny5PU1N5M40411xrYKUT8z2ycm22f4OD2cgR4PrnCfp38wc9748E80837byr9a12dwiZOA1PIA1mE5GK6sTjEIoByaVZyp9oClyU9U2OU8jWcrP3vreAdvvkLP3D6fpA8FM3G4Uh4x6Z1nuoJ9I5FCKO8F0Bf7XH8mDO9Jiq4wnLG44WNeCDEqZXl5Yb87RPmnLbt2yBQj2F7F5iPUONM7aH3bx08ZzJtDpL3S0Ks5BA9030b80B7ie2uPB214NQXeV7973hE4Tr7vg2pluT351nT3stc12WlGHOFwZJ80voq135yToWC0f1o54jbVrR5i8y41qRR7hJBQ3seAU5lKRhaJyv5b89KLcCaFb9o261mVtCNxL2fc9Z367e89zZ91nAZ4yXx12mRExXOC154o1YffrU6n7gEAmwknd6k17618zF5r017KVB5Lkb6NtD1pSe6AADU5DL588o2nuqFLV0X9k21D0E3mmt80z6U2hcvlY2MDH8XC5nqiNc5o17xt5DoKEBJLGy24b2fl87eP5llYQezn0FPZk92q6fcKg1INI83wuK1EkpZjp8eDpecGR4beI2yjK6McRamzt8ihM646qyv6VCi51kZFdffeRC7i01wBRdFo3qh0dI3qeP5excaDzIE8Dr2nw419Q8x3RxU2A770EUKoPddT1F1P3ZMrxQ37T0QMux2jUPTqSXBLN29H7lw1HmWpSX0dCkFOpKFBrdB59kP657t2O1CUP508HIX9tYpIfk2P7enH6x2pov7R90i68AmW2095kYM66986RAhAsEPYM355Hc76bA8rNh0d5h1j4E7kt3z2jApe64QZP6O1542ysDTKqePt27pWaVHjs5VB58apgiEV7LqeLN18S72oI2mBRM2l8kw7B2F23Eyq4E4oUfA23O77GccGGNRElp6i1Zw3ol76Zi0AvnK2xI7h1i1cqFT560j39VqN0AYosrJ4414dQI0cae2bx4q9b5m7tnS3VlUHHKqnFnGnce6uF1aH2AD2O78M9kIHuYd6BhS280ubg84wfDq36KtBOSry1ZOs6DZi97s62YBB2h19ojzg1m2zuhmL6mg5GMQdjKBsNzSz315BKTbAxfMN053XJ2gRZQ3BwYCQ3SWTR4jmdhUjqe9OOVgn24nJ20V8Cf2675PUQG61ZtDrEmvS260ePIV654wzXzIt58X0VMxj15yRKV72gO70BvA7y4OQmvxn0qgc6To26UUod9J696j7DM1BTFv4f9upxR6QqTg4a5p3HBQ9L5LjE3fkdJN5YFZ6wXJNiwsUSXzy1vW28Zr0G0597vVEuz7yMl076IDB0BO1ed2ME2ed23ru1IbIc5NPA01H67NR82PdeFPzzHSRlNz5Gag4vnbSW63KMuG30z2jts1c3Bkm72QyQoh1x294J3pQ5za3yejqO57LWq7ycUJRtX6JXCtxv02qp3XT484q5l48AebV0VX5KRF9bOXDTkHXqr482Um8EDdyw1t90XmHYaXvR4dYsHoNdt4L51rAuq86ZwW5Cd5ZLun1YS359Z81CV5wW91FYOcSF42oCViG2yWg3YtlKgq1jsz3itUi7360kt9eo7xIFUBF0KOrVo5rl0r3y6B7WFMBBm12kt0Yqzmt12Jq3qt7JAuzVrC2VvOtQ52XTEZE1u7swF872x44LZuDmmMvUpdT6pJ9FboE0F3c1NdALJKCP7AhAwhqUayQL7Lj3sU9hE35610S68wkjCwI3A6F72MvT98pH659n4xa9bh0Fnf0VkOjg5Luzxgl020S60KW10wg97YV48WCp9LZicSrKFMD9ETKAj1qLXEk95D1lZE0386R9v00klx3zRfZv07Gnye1B78gI4uTDk4Y8k89G98KQBDezwX2zYS7MRzlT5ANsbAe5Obhnbatrp69PSBh50q6u2W7lOFj20xQ0M4svduPDCy2R97LfBLtD27G82pn5FHg5wPf0le887Xww7dggifv7KavyIncKkVV9fV0A7PW1y3DO2U1sp26D73Om5oG26dnH4EtD72bz5aIR8U6WAknUkfvBaQl3kqBqtpAUNn7OKT0755hRgO9yJSD0gd1vdM6SIAx15h9bO29QHm4ijag7Lma0Rj5XmJ2Vzqbg2nM2vUeRC7Wu2S390y1NHRrYvkr3jzgtv9vQROxO0LKWtQ01L31i04TI8u80AtUKJPbab9Qp4a00sNZ5486QHOqC2SE06klsQ3ZfIEtbOAU42Z1Kz2qnff8HeI9FthM58VJ3RxM6307cW9jF8K3Z69wVG632dl6115Mi6uCq7LYdN57AzXfcUT7oWX1s0J4Hub4eBLaCB"));
    }

    public static String LCS(String str1, String str2) {
        String maxStr = "";
        int maxLen = Integer.MIN_VALUE;

        if (str1.length() < str1.length()) {
            String tmp = str1;
            str1 = str2;
            str2 = tmp;
        }
        for (int i = 0; i <= str1.length(); i++) {
            for (int j = i; j <= str1.length(); j++) {
                String tem = str1.substring(i,j );
                if (str2.contains(tem) && maxLen < j - i) {
                    maxLen = j - i;
                    maxStr = str1.substring(i, j);
                }
            }
        }
        return maxStr;
    }

}
